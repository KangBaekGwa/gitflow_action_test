# Auto Versioning Action
# major.minor.patch => V0.0.1
name: Auto Versioning & Tagging

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Latest Tag
        id: get_tag
        run: |
          # 최신 태그가 있으면 가져오고, 없으면 "v0.0.0"을 기본값으로 설정
          TAG=$(git tag --sort=-v:refname | head -n 1)
          if [ -z "$TAG" ]; then
            TAG="v0.0.0"
          fi
          echo "LATEST_TAG=$TAG" >> $GITHUB_ENV

      - name: Determine Version Bump Based on PR Tags
        id: determine_version
        run: |
          # Get the tags from the PR or branch
          PR_TAG=$(git log -1 --pretty=%B | grep -oP "(?<=#)(feature|bugfix|breaking)/\S+")

          # Use the latest tag that we fetched earlier
          OLD_TAG=${{ env.LATEST_TAG }}

          # Check for feature, bugfix, or breaking tags to determine version increment
          if [[ "$PR_TAG" == *"major/"* ]]; then
            # Increase MAJOR version
            VERSION=$(echo $OLD_TAG | sed 's/v//' | awk -F. '{print $1+1".0.0"}')
          elif [[ "$PR_TAG" == *"minor/"* ]]; then
            # Increase MINOR version
            VERSION=$(echo $OLD_TAG | sed 's/v//' | awk -F. '{print $1"."$2+1".0"}')
          elif [[ "$PR_TAG" == *"patch/"* ]]; then
            # Increase PATCH version
            VERSION=$(echo $OLD_TAG | sed 's/v//' | awk -F. '{print $1"."$2"."$3+1}')
          else
            # Default: Increase PATCH version
            VERSION=$(echo $OLD_TAG | sed 's/v//' | awk -F. '{print $1"."$2"."$3+1}')
          fi

          NEW_TAG="v$VERSION"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Create and Push Tag
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}
